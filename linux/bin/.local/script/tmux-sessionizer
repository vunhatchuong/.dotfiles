#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# -- Configuration -------------------------------------------------------------

MRU_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/tmux_sessions/mru.list"
MAX_MRU=50

# -- Utilities -----------------------------------------------------------------

is_tmuxp_entry() { [[ $1 == *.yaml ]]; }

expand_path() {
    case $1 in
    "~"*) printf '%s\n' "${1/\~/$HOME}" ;;
    *) printf '%s\n' "$1" ;;
    esac
}

sanity_check() {
    for cmd in tmux fzf find git eza; do
        if ! command -v "$cmd" &>/dev/null; then
            echo "[ERROR] '$cmd' is not installed." >&2
            exit 1
        fi
    done
}

# -- MRU Management ------------------------------------------------------------

init_mru() {
    mkdir -p "$(dirname "$MRU_FILE")"
    touch "$MRU_FILE"
}

load_mru() {
    mapfile -t MRU_ENTRIES <"$MRU_FILE"
}

update_mru() {
    local entry="$1"
    grep -Fxv "$entry" "$MRU_FILE" >"${MRU_FILE}.tmp" || true
    {
        echo "$entry"
        head -n $((MAX_MRU - 1)) "${MRU_FILE}.tmp"
    } >"$MRU_FILE"
    rm -f "${MRU_FILE}.tmp"
}

# -- Discovery -----------------------------------------------------------------

_find_all() {
    find ~/.config/tmuxp -name '*.yaml' &
    pid1=$!
    find "${WORKSPACES[@]}" -mindepth 1 -maxdepth 1 -type d &
    pid2=$!
    wait "$pid1" "$pid2"
}

ordered_list() {
    local all=()
    mapfile -t all < <(_find_all)

    for m in "${MRU_ENTRIES[@]}"; do
        for a in "${all[@]}"; do
            [[ "$a" == "$m" ]] && {
                echo "$a"
                break
            }
        done
    done

    comm -23 \
        <(printf '%s\n' "${all[@]}" | sort) \
        <(printf '%s\n' "${MRU_ENTRIES[@]}" | sort)
}

# -- Display -------------------------------------------------------------------

choose_selection() {
    mapfile -t all < <(ordered_list)
    if ((${#all[@]} == 1)); then
        echo "${all[0]}"
        return
    fi

    input=$(
        printf '%s\n' "${all[@]}" | while IFS= read -r path; do
            local label parent

            parent=$(basename "${path%/*}")
            case "$parent" in
            tmuxp) parent="TMUXP" ;;
            esac

            printf '[%s] %s\t%s\n' "$parent" "${path##*/}" "$path"
        done
    )

    selected=$(
        printf '%s\n' "$input" | fzf \
            --delimiter=$'\t' --with-nth=1 \
            --preview '
            file={2}
            if [[ "$file" == *.yaml ]]; then
                # extract and trim the first start_directory line
                sd=$(grep -E "^start_directory:[[:space:]]*" "$file" \
                     | head -1 \
                     | cut -d: -f2- \
                     | xargs)
                # expand ~ and ${HOME}
                sd="${sd/#\~/$HOME}"
                sd="${sd/\$\{HOME\}/$HOME}"

                eza -1 --color=always "$sd"
            elif [[ -d "$file" ]]; then
                eza -1 --color=always "$file"
            else
                echo "Not a directory"
            fi
        ' \
            --prompt="Select session/dir: "
    ) || return

    [[ -z $selected ]] && return
    echo "${selected#*$'\t'}"
}

# -- Session Handling ----------------------------------------------------------

load_tmuxp_session() { tmuxp load -y $1; }

clone_or_create_dir() {
    local target=$1 workspace full

    workspace=$(printf '%s\n' "${WORKSPACES[@]}" | fzf --prompt="Select workspace for '$target': ") || exit 1
    workspace=$(expand_path "$workspace")

    if [[ "$target" =~ ^(https?|git):// ]]; then
        git ls-remote "$target" &>/dev/null || {
            echo "[ERROR] Cannot access '$target'"
            exit 1
        }
        full="$workspace/$(basename "$target" .git)"
        git clone "$target" "$repo_dir"
    else
        full="$workspace/$target"
        mkdir -p "$full"
    fi

    echo "$full"
}

start_or_attach_tmux() {
    local name="$1" dir="$2"

    if [[ -z ${TMUX:-} ]] && ! pgrep tmux &>/dev/null; then
        tmux new-session -s "$name" -c "$dir"
        exit 0
    fi

    if ! tmux has-session -t="$name" 2>/dev/null; then
        tmux new-session -ds "$name" -c "$dir"
    fi

    if [[ -z ${TMUX:-} ]]; then
        tmux attach-session -t "$name"
    else
        tmux switch-client -t "$name"
    fi
}

# -- Main ----------------------------------------------------------------------

sanity_check
WORKSPACES=({{ workspaces }})

init_mru
load_mru

selected=$(choose_selection "$@")
[[ -z $selected || $selected == "$(pwd)" ]] && exit 0

update_mru "$selected"

if is_tmuxp_entry "$selected"; then
    load_tmuxp_session "$selected"
    exit 0
fi

if [[ ! -d $selected ]]; then
    selected=$(clone_or_create_dir "$selected")
    update_mru "$selected"
fi

session_name=$(basename "$selected" | tr '.' '-')
start_or_attach_tmux "$session_name" "$selected"
