#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# -- Configuration -------------------------------------------------------------

MRU_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/tmux_sessions/mru.list"
MAX_MRU=50
TMUXP_PREFIX="[TMUXP] "

# -- Utilities -----------------------------------------------------------------

is_tmuxp_entry() {
    [[ "$1" == "$TMUXP_PREFIX"* ]]
}

expand_path() {
    [[ $1 == ~* ]] && echo "${1/#\~/$HOME}" || echo "$1"
}

sanity_check() {
    for cmd in tmux fzf find git eza; do
        if ! command -v "$cmd" &>/dev/null; then
            echo "[ERROR] '$cmd' is not installed." >&2
            exit 1
        fi
    done
}

# -- MRU Management ------------------------------------------------------------

init_mru() {
    mkdir -p "$(dirname "$MRU_FILE")"
    touch "$MRU_FILE"
}

load_mru() {
    mapfile -t MRU_ENTRIES <"$MRU_FILE"
}

update_mru() {
    local entry="$1"
    grep -Fxv "$entry" "$MRU_FILE" >"${MRU_FILE}.tmp" || true
    {
        echo "$entry"
        head -n $((MAX_MRU - 1)) "${MRU_FILE}.tmp"
    } >"$MRU_FILE"
    rm -f "${MRU_FILE}.tmp"
}

# -- Discovery -----------------------------------------------------------------

_find_all() {
    find ~/.config/tmuxp -name '*.yaml' -printf "${TMUXP_PREFIX}%f\n"
    find \
        {{ workspaces }} \
        -mindepth 1 -maxdepth 1 -type d
}

ordered_list() {
    local all=()
    mapfile -t all < <(_find_all)

    for m in "${MRU_ENTRIES[@]}"; do
        for a in "${all[@]}"; do
            [[ "$a" == "$m" ]] && {
                echo "$a"
                break
            }
        done
    done

    comm -23 \
        <(printf '%s\n' "${all[@]}" | sort) \
        <(printf '%s\n' "${MRU_ENTRIES[@]}" | sort)
}

# -- Display -------------------------------------------------------------------

format_entry() {
    local entry="$1"

    if is_tmuxp_entry "$entry"; then
        echo "$entry"
        return
    fi

    local parent base
    parent=$(basename "${entry%/*}")
    base=$(basename "$entry")
    echo "[$parent] $base"
}

choose_selection() {
    local -a all
    mapfile -t all < <(ordered_list)

    if ((${#all[@]} == 1)); then
        echo "${all[0]}"
        return
    fi

    local input path disp parent base
    input=$(
        printf '%s\n' "${all[@]}" | while IFS= read -r path; do
            if is_tmuxp_entry "$path"; then
                disp="$path"
            else
                parent=$(basename "${path%/*}")
                base=$(basename "$path")
                disp="[$parent] $base"
            fi
            printf '%s\t%s\n' "$disp" "$path"
        done
    )

    local selected
    selected=$(printf '%s\n' "$input" | fzf \
        --delimiter=$'\t' \
        --with-nth=1 \
        --preview '[[ -d {2} ]] && eza -1 --color=always {2} || echo "Not a directory"' \
        --prompt="Select session/dir: ") || return

    [[ -z $selected ]] && return
    echo "${selected#*$'\t'}"
}

# -- Session Handling ----------------------------------------------------------

load_tmuxp_session() {
    local file
    file=$(find ~/.config/tmuxp -name "${1#"${TMUXP_PREFIX}"}" -print -quit)
    tmuxp load "$file" -y
}

clone_or_create_dir() {
    local target="$1"
    local workspace

    workspace=$(echo "{{ workspaces }}" | tr ' ' '\n' | fzf --prompt="Select workspace for '$target': ")
    [[ -z $workspace ]] && {
        echo "No workspace selected. Aborting."
        exit 1
    }
    workspace=$(expand_path "$workspace")

    if [[ "$target" =~ ^(https?|git):// ]]; then
        git ls-remote "$target" &>/dev/null || {
            echo "[ERROR] Cannot access '$target'"
            exit 1
        }
        local repo_dir="$workspace/$(basename "$target" .git)"
        git clone "$target" "$repo_dir"
        echo "$repo_dir"
    else
        local full_path="$workspace/$target"
        mkdir -p "$full_path"
        echo "$full_path"
    fi
}

start_or_attach_tmux() {
    local name="$1" dir="$2"

    if [[ -z ${TMUX:-} ]] && ! pgrep tmux &>/dev/null; then
        tmux new-session -s "$name" -c "$dir"
        exit 0
    fi

    if ! tmux has-session -t="$name" 2>/dev/null; then
        tmux new-session -ds "$name" -c "$dir"
    fi

    if [[ -z ${TMUX:-} ]]; then
        tmux attach-session -t "$name"
    else
        tmux switch-client -t "$name"
    fi
}

# -- Main ----------------------------------------------------------------------

sanity_check
init_mru
load_mru

selected=$(choose_selection "$@")
[[ -z $selected || $selected == "$(pwd)" ]] && exit 0

update_mru "$selected"

if is_tmuxp_entry "$selected"; then
    load_tmuxp_session "$selected"
    exit 0
fi

if [[ ! -d $selected ]]; then
    selected=$(clone_or_create_dir "$selected")
    update_mru "$selected"
fi

session_name=$(basename "$selected" | tr '.' '-')
start_or_attach_tmux "$session_name" "$selected"
